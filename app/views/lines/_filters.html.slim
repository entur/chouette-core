= search_form_for @q, url: line_referential_lines_path(@line_referential), html: {method: :get}, class: 'form form-filter' do |f|
  .ffg-row
    .input-group.search_bar class=filter_item_class(params[:q], :name_or_number_or_short_id_cont)
      = f.search_field :name_or_number_or_short_id_cont, placeholder: t('lines.index.name_or_number_or_short_id'), class: 'form-control'
      span.input-group-btn
        button.btn.btn-default#search-btn type='submit'
          span.fa.fa-search

  .ffg-row
    .form-group.togglable class=filter_item_class(params[:q], :network_id_eq_any)
      = f.label Chouette::Line.tmf(:network_id), required: false, class: 'control-label'
      = f.input :network_id_eq_any, collection: @line_referential.networks.order(name: :asc), as: :check_boxes, label: false, label_method: lambda{|l| ("<span>" + l.name + "</span>").html_safe}, required: false, wrapper_html: { class: 'checkbox_list'}

    .form-group.togglable class=filter_item_class(params[:q], :company_id_eq_any)
      = f.label Chouette::Line.tmf(:company_id), required: false, class: 'control-label'
      = f.input :company_id_eq_any, collection: @line_referential.companies.order(name: :asc), as: :check_boxes, label: false, label_method: lambda{|l| ("<span>" + l.name + "</span>").html_safe}, required: false, wrapper_html: { class: 'checkbox_list'}

    .form-group.togglable class=filter_item_class(params[:q], :transport_mode)
      = f.label Chouette::Line.tmf(:transport_mode), required: false, class: 'control-label'
      .form-group.checkbox_list.js-transport-mode-checkboxes
        = f.simple_fields_for :transport_mode do |p|
          - NetexTransportModeEnumerations.sorted_transport_modes.each do |mode|
            = p.input mode.to_sym,
              label: ("<span>" + t("enumerize.transport_mode.#{mode}") + "</span>").html_safe,
              as: :boolean,
              wrapper_html: { class: 'checkbox-wrapper'},
              checked_value: true,
              unchecked_value: false,
              input_html: { checked: @transport_modes&.include?(mode), data: { transport_mode: mode } }
    .form-group.togglable class=filter_item_class(params[:q], :transport_submode)
      = f.label Chouette::Line.tmf(:transport_submode), required: false, class: 'control-label'
      .form-group.checkbox_list.js-transport-submode-checkboxes data-transport_submodes=Chouette::Line.formatted_submodes_for_transports.to_json
        = f.simple_fields_for :transport_submode do |p|
          - NetexTransportSubmodeEnumerations.sorted_transport_submodes.each do |submode|
            = p.input submode.to_sym,
              label: ("<span>" + t("enumerize.transport_submode.#{submode}") + "</span>").html_safe,
              as: :boolean,
              wrapper_html: { class: 'checkbox-wrapper' },
              checked_value: true,
              unchecked_value: false,
              input_html: { checked: @transport_submodes&.include?(submode), data: { transport_submode: submode } }

    .form-group.togglable class=filter_item_class(params[:q], :status)
      = f.label Chouette::Line.tmf(:status), required: false, class: 'control-label'
      .form-group.checkbox_list.line_status
        = f.input :status, as: :radio_buttons, collection: %w(all activated deactivated).map{|status| [("<span>#{t("enumerize.line.status.#{status}")}#{status_symbol(status)}</span>").html_safe, status] }, checked: params[:q] && params[:q][:status] || "all", label: false, wrapper_html: { class: 'radiobox-wrapper' }
        hr
        .col-md-3
          = f.input :status_from_enabled, as: :switchable_checkbox, value: true, input_html: { checked: params[:q] && params[:q][:status_from_enabled] == '1' }, label: false
        .col-md-9
          = f.input :status_from, as: :date, selected: @status_from || Time.now, label: 'lines.filters.status_from'.t, wrapper_html: { class: 'inline-form' }, required: false
        .col-md-3
          = f.input :status_until_enabled, as: :switchable_checkbox, value: true, input_html: { checked: params[:q] && params[:q][:status_until_enabled] == '1' }, label: false
        .col-md-9
          = f.input :status_until, as: :date, selected: @status_until || Time.now, label: 'lines.filters.status_to'.t, wrapper_html: { class: 'inline-form' }, required: false
  .actions
    = link_to t('actions.erase'), @workbench, class: 'btn btn-link'
    = f.submit t('actions.filter'), class: 'btn btn-default'

  - content_for :javascript do
    coffee:
      toggleDates = ->
        val = $('.line_status input[name="q[status]"]:checked').attr('value')
        checkbox = $('.line_status #qstatus_from_enabled')
        checkbox.parents('.onoffswitch').toggleClass 'disabled', val == 'all'
        disabled = val == 'all' || !checkbox.is(':checked')
        $('.line_status select.date[name*="q[status_from"]').attr 'disabled', disabled
        $('.line_status select.date[name*="q[status_from"]').toggleClass 'disabled', disabled
        $('.line_status label.date[for=q_status_from_3i]').toggleClass 'disabled', disabled

        checkbox = $('.line_status #qstatus_until_enabled')
        checkbox.parents('.onoffswitch').toggleClass 'disabled', val == 'all'
        disabled = val == 'all' || !checkbox.is(':checked')
        $('.line_status select.date[name*="q[status_until"]').attr 'disabled', disabled
        $('.line_status select.date[name*="q[status_until"]').toggleClass 'disabled', disabled
        $('.line_status label.date[for=q_status_until_3i]').toggleClass 'disabled', disabled


      $('.line_status input[type=radio]').change toggleDates
      $('.line_status input[type=checkbox]').change toggleDates
      toggleDates()
