- show_stop_area_providers = @stop_area_referential.stop_areas.joins(:stop_area_providers).exists?

- breadcrumb :stop_areas, @stop_area_referential

.page_content
  .container-fluid
    - if params[:q].present? or @stop_areas.any?
      .row
        .col-lg-12
          = render partial: 'filters', locals: {hide_stop_area_providers: !show_stop_area_providers}

    - if @stop_areas.any?
      .row
        .col-lg-12
          = table_builder_2 @stop_areas,
            [ \
              TableBuilderHelper::Column.new( \
                name: t('id_reflex'), \
                attribute: Proc.new { |n| n.get_objectid.try(:short_id) }, \
                sortable: false \
              ), \
              TableBuilderHelper::Column.new( \
                key: :name, \
                attribute: 'name', \
                link_to: lambda do |stop_area| \
                  stop_area_referential_stop_area_path( \
                    @stop_area_referential, \
                    stop_area \
                  ) \
                end \
              ), \
              TableBuilderHelper::Column.new( \
                key: :registration_number, \
                attribute: 'registration_number' \
              ), \
              TableBuilderHelper::Column.new( \
                key: :status, \
                attribute: Proc.new { |s| stop_area_status(s.status) } \
              ), \
              show_stop_area_providers ? TableBuilderHelper::Column.new( \
                key: :stop_area_providers, \
                attribute: Proc.new { |s| s.stop_area_providers.map{|p| link_to(p.name, [p.stop_area_referential, p])}.to_sentence.html_safe }, \
                sortable: false\
              ) : nil, \
              TableBuilderHelper::Column.new( \
                key: :zip_code, \
                attribute: 'zip_code' \
              ), \
              TableBuilderHelper::Column.new( \
                key: :city_name, \
                attribute: 'city_name' \
              ), \
              TableBuilderHelper::Column.new( \
                key: :area_type, \
                attribute: Proc.new { |s| Chouette::AreaType.find(s.area_type).try :label } \
              ), \
            ].compact,
            cls: 'table has-filter has-search'

          = new_pagination @stop_areas, 'pull-right'

    - unless @stop_areas.any?
      .row.mt-xs
        .col-lg-12
          = replacement_msg t('stop_areas.search_no_results')
